#ifndef COMMON_TH_
#define COMMON_TH_

// The stack-setup prologue sets up a stack at the top of 16K
#define prologue            o <- 1 ; o <- o << 13 ; o <- o - 1

#define rel(Label)          reloff(Label,0)
#define reloff(Label,Off)   (@Label - (. + 1 - (Off))) + p
#define goto(Label)         p <- rel(Label)
#define callnz(Cond,Label)  p <- Cond & 1 + p ; p <- p + 3 ; push(p + 2); goto(Label)
#define call(Label)         push(p + 2); goto(Label)
#define callr(Reg)          push(p + 2); p <- Reg
// XXX jnzrel requires Cond to be either 0 or -1, so it's not properly "nz"
#define jnzrel(Cond,Label)  p <- Cond & rel(Label)
#define jzrel(Cond,Label)   p <- Cond & 1 + p ; goto(Label)
#define push(Expr)          [o] <- Expr ; o <- o - 1
#define pop(Reg)            o <- o + 1 ; Reg <- [o]
#define ret                 pop(p)

#include "push.th"

// arguments pushed in the order specified
#define pushall(...)        pushall_(o,__VA_ARGS__)
// arguments popped in the reverse of the order specified
#define popall(...)         popall_(o,__VA_ARGS__)
#define loadall(...)        loadall_(o,__VA_ARGS__)
#define dropall(...)        dropall_(o,__VA_ARGS__)

#endif

/* vi:set syntax=c: */
