#ifndef COMMON_TH_
#define COMMON_TH_

// The stack-setup prologue sets up a stack at the top of 8K
#define prologue            o <- 1 ; o <- o << 13 ; o <- o - 1

#define rel(Label)          reloff(Label,0)
#define reloff(Label,Off)   (@Label - (. + 1 - (Off))) + p
#define offsetpc(Reg)       Reg + p - (. + 1)
#define goto(Label)         p <- rel(Label)
#define call(Label)         push(p + 2); goto(Label)
#define callr(Reg)          push(p + 2); p <- Reg
// XXX jnzrel requires Cond to be either 0 or -1, so it's not properly "nz"
#define jnzrel(Cond,Label)  p <- (@Label - (. + 1)) &  Cond + p
#define jzrel(Cond,Label)   p <- (@Label - (. + 1)) &~ Cond + p
#define push(Expr)          [o] <- Expr ; o <- o - 1
#define pop(Reg)            o <- o + 1 ; Reg <- [o]
#define ret                 pop(p)
#define illegal             p <- -1

#include "push.th"

// specify arguments to push or pop in address-ascending order
// The stack pointer is moved downward in memory, but arguments are pushed and
// popped upward in memory (last argument to {push,pop,load,drop}all has the
// highest address in memory)
#define pushall(...)        pushall_(o,__VA_ARGS__)
#define popall(...)         popall_(o,__VA_ARGS__)
#define loadall(...)        loadall_(o,__VA_ARGS__)
#define dropall(...)        dropall_(o,__VA_ARGS__)
// popall_ret() for convenient symmetry with a frame-creating popall()
#define popall_ret(...)     popall(P,__VA_ARGS__)

#define bare_metal_init() \
    b <- a ; c <- a ; d <- a ; e <- a ; f <- a ; g <- a ; h <- a ; \
    i <- a ; j <- a ; k <- a ; l <- a ; m <- a ; n <- a ; o <- a ; \
    //

#endif

/* vi:set syntax=c: */
